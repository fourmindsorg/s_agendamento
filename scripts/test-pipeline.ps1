# ========================================
# Script de Teste do Pipeline CI/CD
# Sistema de Agendamento - 4Minds
# ========================================

param(
    [switch]$DryRun,
    [switch]$Verbose
)

# Configurar output colorido
$Host.UI.RawUI.ForegroundColor = "White"

function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

Write-Host "üß™ Testando Pipeline CI/CD" -ForegroundColor Cyan
Write-Host "===========================" -ForegroundColor Cyan

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "manage.py")) {
    Write-Error "Execute este script no diret√≥rio raiz do projeto Django"
    exit 1
}

# Verificar se estamos em um reposit√≥rio Git
if (-not (Test-Path ".git")) {
    Write-Error "Este n√£o √© um reposit√≥rio Git. Execute 'git init' primeiro."
    exit 1
}

Write-Status "Verificando configura√ß√£o do pipeline..."

# 1. Verificar arquivos de configura√ß√£o
Write-Status "1. Verificando arquivos de configura√ß√£o..."

$configFiles = @(
    ".env.example",
    "aws-infrastructure/terraform.tfvars.example",
    ".github/workflows/ci.yml",
    ".github/workflows/deploy.yml",
    ".github/workflows/terraform.yml"
)

$missingFiles = @()
foreach ($file in $configFiles) {
    if (Test-Path $file) {
        Write-Success "‚úÖ $file"
    } else {
        Write-Error "‚ùå $file"
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Error "Arquivos de configura√ß√£o ausentes. Execute setup-ci-cd.ps1 primeiro."
    exit 1
}

# 2. Verificar depend√™ncias Python
Write-Status "2. Verificando depend√™ncias Python..."

try {
    $requirements = Get-Content "requirements.txt"
    Write-Success "‚úÖ requirements.txt encontrado ($($requirements.Count) depend√™ncias)"
    
    # Verificar se as depend√™ncias est√£o instaladas
    Write-Status "Verificando depend√™ncias instaladas..."
    pip list | Out-Null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "‚úÖ pip funcionando"
    } else {
        Write-Error "‚ùå pip n√£o funcionando"
        exit 1
    }
} catch {
    Write-Error "‚ùå Erro ao verificar depend√™ncias Python"
    exit 1
}

# 3. Testar configura√ß√£o Django
Write-Status "3. Testando configura√ß√£o Django..."

# Configurar ambiente de teste
Write-Status "Configurando ambiente de teste..."
Copy-Item ".env.example" ".env" -Force
Add-Content ".env" "SECRET_KEY=test-secret-key-for-pipeline-test"
Add-Content ".env" "DEBUG=True"
Add-Content ".env" "ENVIRONMENT=development"

# Testar configura√ß√£o Django
Write-Status "Executando verifica√ß√µes Django..."
try {
    python manage.py check 2>&1 | Out-Null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "‚úÖ Django check passou"
    } else {
        Write-Error "‚ùå Django check falhou"
        exit 1
    }
} catch {
    Write-Error "‚ùå Erro ao executar Django check"
    exit 1
}

# Testar migra√ß√µes
Write-Status "Testando migra√ß√µes..."
try {
    python manage.py migrate --dry-run 2>&1 | Out-Null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "‚úÖ Migra√ß√µes OK"
    } else {
        Write-Error "‚ùå Erro nas migra√ß√µes"
        exit 1
    }
} catch {
    Write-Error "‚ùå Erro ao testar migra√ß√µes"
    exit 1
}

# 4. Testar coleta de arquivos est√°ticos
Write-Status "4. Testando coleta de arquivos est√°ticos..."

try {
    python manage.py collectstatic --noinput --dry-run 2>&1 | Out-Null
    if ($LASTEXITCODE -eq 0) {
        Write-Success "‚úÖ Collectstatic OK"
    } else {
        Write-Error "‚ùå Erro no collectstatic"
        exit 1
    }
} catch {
    Write-Error "‚ùå Erro ao testar collectstatic"
    exit 1
}

# 5. Verificar AWS CLI (se dispon√≠vel)
Write-Status "5. Verificando AWS CLI..."

try {
    $awsVersion = aws --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Success "‚úÖ AWS CLI encontrado: $awsVersion"
        
        # Testar conectividade AWS
        Write-Status "Testando conectividade AWS..."
        $awsIdentity = aws sts get-caller-identity 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Success "‚úÖ Conectividade AWS OK"
        } else {
            Write-Warning "‚ö†Ô∏è AWS n√£o configurado ou sem permiss√µes"
        }
    } else {
        Write-Warning "‚ö†Ô∏è AWS CLI n√£o encontrado"
    }
} catch {
    Write-Warning "‚ö†Ô∏è AWS CLI n√£o dispon√≠vel"
}

# 6. Verificar GitHub CLI (se dispon√≠vel)
Write-Status "6. Verificando GitHub CLI..."

try {
    $ghVersion = gh --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Success "‚úÖ GitHub CLI encontrado: $ghVersion"
        
        # Verificar autentica√ß√£o GitHub
        Write-Status "Verificando autentica√ß√£o GitHub..."
        $ghStatus = gh auth status 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Success "‚úÖ GitHub autenticado"
        } else {
            Write-Warning "‚ö†Ô∏è GitHub n√£o autenticado"
        }
    } else {
        Write-Warning "‚ö†Ô∏è GitHub CLI n√£o encontrado"
    }
} catch {
    Write-Warning "‚ö†Ô∏è GitHub CLI n√£o dispon√≠vel"
}

# 7. Verificar Terraform (se dispon√≠vel)
Write-Status "7. Verificando Terraform..."

try {
    $terraformVersion = terraform --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Success "‚úÖ Terraform encontrado: $terraformVersion"
        
        # Verificar configura√ß√£o Terraform
        Write-Status "Verificando configura√ß√£o Terraform..."
        Push-Location "aws-infrastructure"
        
        try {
            terraform init 2>&1 | Out-Null
            if ($LASTEXITCODE -eq 0) {
                Write-Success "‚úÖ Terraform init OK"
                
                terraform validate 2>&1 | Out-Null
                if ($LASTEXITCODE -eq 0) {
                    Write-Success "‚úÖ Terraform validate OK"
                } else {
                    Write-Warning "‚ö†Ô∏è Terraform validate falhou"
                }
            } else {
                Write-Warning "‚ö†Ô∏è Terraform init falhou"
            }
        } catch {
            Write-Warning "‚ö†Ô∏è Erro ao verificar Terraform"
        } finally {
            Pop-Location
        }
    } else {
        Write-Warning "‚ö†Ô∏è Terraform n√£o encontrado"
    }
} catch {
    Write-Warning "‚ö†Ô∏è Terraform n√£o dispon√≠vel"
}

# 8. Verificar status do Git
Write-Status "8. Verificando status do Git..."

try {
    $gitStatus = git status --porcelain 2>&1
    $gitBranch = git branch --show-current 2>&1
    
    Write-Success "‚úÖ Git funcionando (branch: $gitBranch)"
    
    if ($gitStatus) {
        Write-Warning "‚ö†Ô∏è H√° mudan√ßas n√£o commitadas:"
        Write-Host $gitStatus -ForegroundColor Yellow
    } else {
        Write-Success "‚úÖ Working directory limpo"
    }
} catch {
    Write-Error "‚ùå Erro ao verificar Git"
    exit 1
}

# 9. Simular teste de deploy (se n√£o for dry run)
if (-not $DryRun) {
    Write-Status "9. Simulando teste de deploy..."
    
    # Verificar se h√° mudan√ßas para commit
    $gitStatus = git status --porcelain
    if ($gitStatus) {
        Write-Status "Fazendo commit das mudan√ßas de teste..."
        git add .
        git commit -m "Teste pipeline CI/CD - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        
        Write-Status "Fazendo push para testar pipeline..."
        git push origin main
        
        Write-Success "‚úÖ Push realizado. Verifique os workflows em:"
        Write-Host "   https://github.com/$(gh repo view --json nameWithOwner -q .nameWithOwner)/actions" -ForegroundColor Cyan
    } else {
        Write-Warning "‚ö†Ô∏è Nenhuma mudan√ßa para commit"
    }
} else {
    Write-Status "9. Dry run - pulando teste de deploy"
}

# Limpeza
Write-Status "Limpando arquivos de teste..."
if (Test-Path ".env") {
    Remove-Item ".env" -Force
}

# Resumo final
Write-Host ""
Write-Host "=========================================" -ForegroundColor Cyan
Write-Success "Teste do Pipeline Conclu√≠do!"
Write-Host "=========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìä Resumo dos Testes:" -ForegroundColor Yellow
Write-Host "‚úÖ Arquivos de configura√ß√£o" -ForegroundColor Green
Write-Host "‚úÖ Depend√™ncias Python" -ForegroundColor Green
Write-Host "‚úÖ Configura√ß√£o Django" -ForegroundColor Green
Write-Host "‚úÖ Migra√ß√µes" -ForegroundColor Green
Write-Host "‚úÖ Collectstatic" -ForegroundColor Green
Write-Host "‚úÖ Status Git" -ForegroundColor Green

if (-not $DryRun) {
    Write-Host ""
    Write-Host "üöÄ Pipeline testado com sucesso!" -ForegroundColor Green
    Write-Host "Verifique os workflows no GitHub Actions para confirmar o deploy." -ForegroundColor Yellow
} else {
    Write-Host ""
    Write-Host "üß™ Dry run conclu√≠do. Execute sem -DryRun para testar o deploy real." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üìö Para mais informa√ß√µes:" -ForegroundColor Cyan
Write-Host "  - CI/CD Analysis: CI_CD_ANALYSIS.md" -ForegroundColor White
Write-Host "  - Configura√ß√£o: CONFIGURACAO.md" -ForegroundColor White
Write-Host "  - Seguran√ßa: SECURITY.md" -ForegroundColor White

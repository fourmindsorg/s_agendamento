#!/usr/bin/env python3
"""
Script principal para deploy completo do Sistema de Agendamento 4Minds
Este script orquestra todo o processo:
1. Coleta informa√ß√µes da infraestrutura
2. Atualiza configura√ß√µes
3. Realiza deploy do Django
"""

import sys
import subprocess
from pathlib import Path


class DeployOrchestrator:
    def __init__(self):
        self.terraform_dir = Path(__file__).parent
        self.scripts = {
            "collect_info": self.terraform_dir / "collect_infrastructure_info.py",
            "deploy_django": self.terraform_dir / "deploy_django.py",
        }

    def run_script(self, script_name, description):
        """Executa um script Python"""
        script_path = self.scripts.get(script_name)
        if not script_path or not script_path.exists():
            print(f"‚ùå Script n√£o encontrado: {script_name}")
            return False

        print(f"\n{'='*60}")
        print(f"üöÄ {description}")
        print(f"{'='*60}")

        try:
            result = subprocess.run([sys.executable, str(script_path)], check=True)
            print(f"‚úÖ {description} - Conclu√≠do com sucesso!")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro em {description}: {e}")
            return False

    def check_prerequisites(self):
        """Verifica pr√©-requisitos"""
        print("üîç Verificando pr√©-requisitos...")

        # Verificar se estamos no diret√≥rio correto
        if not (self.terraform_dir / "main.tf").exists():
            print("‚ùå Execute este script no diret√≥rio infrastructure/")
            return False

        # Verificar se o Terraform est√° dispon√≠vel
        try:
            subprocess.run(["terraform", "version"], check=True, capture_output=True)
            print("‚úÖ Terraform dispon√≠vel")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Terraform n√£o encontrado. Instale o Terraform primeiro.")
            return False

        # Verificar se o AWS CLI est√° dispon√≠vel
        try:
            subprocess.run(["aws", "--version"], check=True, capture_output=True)
            print("‚úÖ AWS CLI dispon√≠vel")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print(
                "‚ö†Ô∏è AWS CLI n√£o encontrado. Algumas funcionalidades podem n√£o funcionar."
            )

        # Verificar se o SSH est√° dispon√≠vel
        try:
            subprocess.run(["ssh", "-V"], check=True, capture_output=True)
            print("‚úÖ SSH dispon√≠vel")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå SSH n√£o encontrado. Necess√°rio para deploy.")
            return False

        print("‚úÖ Pr√©-requisitos verificados!")
        return True

    def run_terraform_apply(self):
        """Executa terraform apply se necess√°rio"""
        print("\nüîß Verificando se a infraestrutura precisa ser criada...")

        try:
            # Verificar se h√° recursos no estado
            result = subprocess.run(
                ["terraform", "state", "list"],
                cwd=self.terraform_dir,
                capture_output=True,
                text=True,
            )

            if result.returncode == 0 and result.stdout.strip():
                print("‚úÖ Infraestrutura j√° existe")
                return True
            else:
                print("üèóÔ∏è Criando infraestrutura...")
                subprocess.run(
                    ["terraform", "apply", "-auto-approve"],
                    cwd=self.terraform_dir,
                    check=True,
                )
                print("‚úÖ Infraestrutura criada com sucesso!")
                return True

        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao verificar/criar infraestrutura: {e}")
            return False

    def run(self):
        """Executa o processo completo de deploy"""
        print("üöÄ Iniciando deploy completo do Sistema de Agendamento 4Minds")
        print("=" * 80)

        # Verificar pr√©-requisitos
        if not self.check_prerequisites():
            return False

        # Criar/aplicar infraestrutura
        if not self.run_terraform_apply():
            return False

        # Coletar informa√ß√µes da infraestrutura
        if not self.run_script(
            "collect_info", "Coletando informa√ß√µes da infraestrutura"
        ):
            return False

        # Realizar deploy do Django
        if not self.run_script("deploy_django", "Realizando deploy do Django"):
            return False

        # Sucesso!
        print("\n" + "=" * 80)
        print("üéâ DEPLOY COMPLETO REALIZADO COM SUCESSO!")
        print("=" * 80)
        print("‚úÖ Infraestrutura AWS criada")
        print("‚úÖ Configura√ß√µes atualizadas")
        print("‚úÖ Django deployado e funcionando")
        print("\nüåê Seu sistema est√° online e pronto para uso!")
        print("=" * 80)

        return True


def main():
    orchestrator = DeployOrchestrator()
    success = orchestrator.run()

    if success:
        print("\n‚úÖ Deploy completo conclu√≠do com sucesso!")
        sys.exit(0)
    else:
        print("\n‚ùå Erro no deploy completo!")
        sys.exit(1)


if __name__ == "__main__":
    main()

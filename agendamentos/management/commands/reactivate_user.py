"""
Comando Django para reativar usu√°rios desativados
Sistema de Agendamento - 4Minds

Uso:
    python manage.py reactivate_user --username usuario123
    python manage.py reactivate_user --username usuario123 --extend-days 30
"""

from django.core.management.base import BaseCommand, CommandError
from django.contrib.auth import get_user_model
from django.utils import timezone
from datetime import timedelta

User = get_user_model()


class Command(BaseCommand):
    help = "Reativa usu√°rios desativados e opcionalmente estende o per√≠odo de teste"

    def add_arguments(self, parser):
        parser.add_argument(
            "--username",
            type=str,
            required=True,
            help="Username do usu√°rio a ser reativado",
        )
        parser.add_argument(
            "--extend-days",
            type=int,
            default=0,
            help="Estender per√≠odo de teste por N dias (atualiza date_joined)",
        )
        parser.add_argument(
            "--force",
            action="store_true",
            help="For√ßa reativa√ß√£o mesmo de superusers",
        )

    def handle(self, *args, **options):
        username = options["username"]
        extend_days = options["extend_days"]
        force = options["force"]

        try:
            usuario = User.objects.get(username=username)
        except User.DoesNotExist:
            raise CommandError(f'‚ùå Usu√°rio "{username}" n√£o encontrado.')

        # Verificar se j√° est√° ativo
        if usuario.is_active:
            self.stdout.write(
                self.style.WARNING(f'Usu√°rio "{username}" j√° est√° ativo.')
            )
            return

        # Verificar se √© superuser
        if usuario.is_superuser and not force:
            self.stdout.write(
                self.style.ERROR(
                    f'Usu√°rio "{username}" √© superuser. Use --force para reativar.'
                )
            )
            return

        # Mostrar informa√ß√µes do usu√°rio
        dias_desativado = (timezone.now() - usuario.date_joined).days
        self.stdout.write(f"üë§ Usu√°rio: {usuario.username}")
        self.stdout.write(f"üìß Email: {usuario.email}")
        self.stdout.write(f"üë®‚Äçüíº Nome: {usuario.get_full_name()}")
        self.stdout.write(
            f'üìÖ Cadastrado em: {usuario.date_joined.strftime("%d/%m/%Y %H:%M")}'
        )
        self.stdout.write(f"üìä Dias desde cadastro: {dias_desativado}")

        if extend_days > 0:
            # Atualizar date_joined para estender per√≠odo
            nova_data = timezone.now() - timedelta(days=14 - extend_days)
            usuario.date_joined = nova_data
            self.stdout.write(
                f'‚è∞ Nova data de cadastro: {nova_data.strftime("%d/%m/%Y %H:%M")}'
            )
            self.stdout.write(f"üìÖ Per√≠odo de teste estendido por {extend_days} dias")

        # Confirmar opera√ß√£o
        confirmacao = input(
            f'Deseja reativar o usu√°rio "{username}"? '
            'Digite "CONFIRMAR" para prosseguir: '
        )

        if confirmacao != "CONFIRMAR":
            self.stdout.write(self.style.WARNING("Opera√ß√£o cancelada pelo usu√°rio."))
            return

        # Reativar usu√°rio
        try:
            usuario.is_active = True
            usuario.save()

            self.stdout.write(
                self.style.SUCCESS(f'Usu√°rio "{username}" reativado com sucesso!')
            )

            if extend_days > 0:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"Per√≠odo de teste estendido por {extend_days} dias!"
                    )
                )

        except Exception as e:
            raise CommandError(f"Erro ao reativar usu√°rio: {e}")

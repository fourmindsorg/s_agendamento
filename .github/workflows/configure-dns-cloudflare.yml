name: Configure DNS - Cloudflare

on:
  workflow_dispatch:
    inputs:
      domain:
        description: "Domain name (ex: fourmindstech.com.br)"
        required: true
        default: "fourmindstech.com.br"

env:
  EC2_IP: 34.228.191.215
  DOMAIN: ${{ github.event.inputs.domain || 'fourmindstech.com.br' }}

jobs:
  configure-dns:
    name: Configure DNS Records in Cloudflare
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get Zone ID
        id: get-zone
        run: |
          ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=${{ env.DOMAIN }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')

          if [ -z "$ZONE_ID" ] || [ "$ZONE_ID" == "null" ]; then
            echo "❌ Zone não encontrada para ${{ env.DOMAIN }}"
            echo "Certifique-se de que o domínio está adicionado ao Cloudflare"
            exit 1
          fi

          echo "zone_id=$ZONE_ID" >> $GITHUB_OUTPUT
          echo "✅ Zone ID: $ZONE_ID"

      - name: Create/Update Root DNS Record (@)
        run: |
          ZONE_ID="${{ steps.get-zone.outputs.zone_id }}"

          # Verificar se registro já existe
          RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=A&name=${{ env.DOMAIN }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')

          if [ "$RECORD_ID" != "null" ] && [ -n "$RECORD_ID" ]; then
            # Atualizar registro existente
            curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "A",
                "name": "${{ env.DOMAIN }}",
                "content": "${{ env.EC2_IP }}",
                "ttl": 3600,
                "proxied": false
              }'
            echo "✅ Registro @ atualizado"
          else
            # Criar novo registro
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "A",
                "name": "${{ env.DOMAIN }}",
                "content": "${{ env.EC2_IP }}",
                "ttl": 3600,
                "proxied": false
              }'
            echo "✅ Registro @ criado"
          fi

      - name: Create/Update WWW DNS Record
        run: |
          ZONE_ID="${{ steps.get-zone.outputs.zone_id }}"

          # Verificar se registro já existe
          RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=A&name=www.${{ env.DOMAIN }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')

          if [ "$RECORD_ID" != "null" ] && [ -n "$RECORD_ID" ]; then
            # Atualizar registro existente
            curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records/$RECORD_ID" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "A",
                "name": "www.${{ env.DOMAIN }}",
                "content": "${{ env.EC2_IP }}",
                "ttl": 3600,
                "proxied": false
              }'
            echo "✅ Registro www atualizado"
          else
            # Criar novo registro
            curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{
                "type": "A",
                "name": "www.${{ env.DOMAIN }}",
                "content": "${{ env.EC2_IP }}",
                "ttl": 3600,
                "proxied": false
              }'
            echo "✅ Registro www criado"
          fi

      - name: Verify DNS Records
        run: |
          ZONE_ID="${{ steps.get-zone.outputs.zone_id }}"

          echo "Verificando registros DNS..."
          echo ""

          # Listar registros A
          curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?type=A" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq -r '.result[] | select(.name | contains("${{ env.DOMAIN }}")) | "  \(.name) -> \(.content)"'

      - name: DNS Configuration Summary
        run: |
          echo "════════════════════════════════════════════════════════"
          echo "✅ DNS CONFIGURADO COM SUCESSO NO CLOUDFLARE!"
          echo "════════════════════════════════════════════════════════"
          echo ""
          echo "Registros criados:"
          echo "  • Tipo: A | Nome: @ | Valor: ${{ env.EC2_IP }}"
          echo "  • Tipo: A | Nome: www | Valor: ${{ env.EC2_IP }}"
          echo ""
          echo "Domínio: ${{ env.DOMAIN }}"
          echo "IP: ${{ env.EC2_IP }}"
          echo ""
          echo "⏰ Cloudflare geralmente propaga em 1-5 minutos"
          echo ""
          echo "Verificar propagação:"
          echo "  nslookup ${{ env.DOMAIN }}"
          echo "  nslookup www.${{ env.DOMAIN }}"
          echo ""
          echo "Próximo passo:"
          echo "  Execute o workflow 'Install SSL Certificate'"
          echo "════════════════════════════════════════════════════════"







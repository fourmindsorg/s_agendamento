# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup environment variables
        run: |
          cp .env.example .env
          echo "SECRET_KEY=test-secret-key-for-deploy" >> .env
          echo "DEBUG=False" >> .env
          echo "ENVIRONMENT=production" >> .env

      - name: Run Django checks
        run: |
          python manage.py check
          python manage.py check --deploy

      - name: Run tests
        run: |
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code from GitHub main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup environment variables
        run: |
          cp .env.example .env
          echo "SECRET_KEY=test-secret-key-for-deploy" >> .env
          echo "DEBUG=False" >> .env
          echo "ENVIRONMENT=production" >> .env

      - name: Run tests
        run: |
          python manage.py check
          python manage.py test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to EC2 via SSM
        run: |
          echo "üöÄ Iniciando deploy..."
          
          INSTANCE_ID="i-0077873407e4114b1"
          
          echo "üì• Fazendo pull da branch main..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              'cd /opt/s-agendamento',
              'git fetch origin',
              'git reset --hard origin/main',
              'git log --oneline -1'
            ]"
          
          echo "üì¶ Instalando depend√™ncias..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              'cd /opt/s-agendamento',
              'source venv/bin/activate',
              'pip install -r requirements.txt'
            ]"
          
          echo "üóÑÔ∏è Executando migra√ß√µes..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              'cd /opt/s-agendamento',
              'source venv/bin/activate',
              'python manage.py migrate',
              'python manage.py collectstatic --noinput'
            ]"
          
          echo "üîÑ Reiniciando servi√ßos..."
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              'sudo supervisorctl restart s-agendamento',
              'sudo systemctl reload nginx',
              'sleep 5',
              'sudo supervisorctl status',
              'curl -I http://localhost',
              'curl -I http://52.91.139.151'
            ]"
          
          echo "üéâ Deploy conclu√≠do!"

      - name: Health Check
        run: |
          echo "üè• Verificando sa√∫de do servidor..."
          sleep 30

          # Testar HTTP primeiro
          echo "üîç Testando HTTP..."
          if curl -f -s http://fourmindstech.com.br/ > /dev/null; then
            echo "‚úÖ HTTP funcionando!"
          else
            echo "‚ùå HTTP n√£o funciona"
          fi

          # Testar HTTPS
          echo "üîç Testando HTTPS..."
          if curl -f -s https://fourmindstech.com.br/ > /dev/null; then
            echo "‚úÖ HTTPS funcionando!"
          else
            echo "‚ùå HTTPS n√£o funciona"
          fi

          # Testar endpoint espec√≠fico
          echo "üîç Testando endpoint de planos..."
          if curl -f -s https://fourmindstech.com.br/authentication/planos/ > /dev/null; then
            echo "‚úÖ Endpoint de planos funcionando!"
          else
            echo "‚ùå Endpoint de planos n√£o funciona"
          fi

          echo "‚úÖ Health check conclu√≠do!"

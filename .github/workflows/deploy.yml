name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0
  DOMAIN: fourmindstech.com.br
  APP_PATH: /agendamento

jobs:
  # Job 1: Validar e Testar
  validate:
    name: Validate & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort

      - name: Linting com flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Verificar formata√ß√£o com black
        run: black --check .
        continue-on-error: true

      - name: Django Check
        run: |
          python manage.py check
        env:
          DJANGO_SETTINGS_MODULE: core.settings

      - name: Testes
        run: |
          python manage.py test
        continue-on-error: true

  # Job 2: Build e Deploy Terraform
  terraform-deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'

    defaults:
      run:
        working-directory: ./aws-infrastructure

    outputs:
      ec2_ip: ${{ steps.terraform-output.outputs.ec2_ip }}

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="domain_name=${{ env.DOMAIN }}" \
            -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          EC2_IP=$(terraform output -raw ec2_public_ip)
          echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT
          echo "EC2 IP: $EC2_IP"

      - name: Aguardar inst√¢ncia estar pronta
        run: sleep 120

  # Job 3: Deploy da Aplica√ß√£o
  app-deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform-deploy

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.terraform-deploy.outputs.ec2_ip }} >> ~/.ssh/known_hosts
          ssh-keyscan -H ${{ env.DOMAIN }} >> ~/.ssh/known_hosts

      - name: Verificar conectividade
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform-deploy.outputs.ec2_ip }} "echo 'Conectado com sucesso!'"

      - name: Aguardar servi√ßos inicializarem
        run: |
          echo "Aguardando Django e Nginx iniciarem..."
          sleep 60

          # Tentar conectar at√© 10 vezes
          for i in {1..10}; do
            if ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform-deploy.outputs.ec2_ip }} "systemctl is-active django"; then
              echo "Django est√° ativo!"
              break
            fi
            echo "Tentativa $i/10 - Aguardando Django..."
            sleep 30
          done

      - name: Atualizar aplica√ß√£o no servidor
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform-deploy.outputs.ec2_ip }} << 'EOF'
            set -e
            
            # Ir para diret√≥rio da aplica√ß√£o
            cd /home/django/sistema-de-agendamento
            
            # Pull das √∫ltimas altera√ß√µes
            sudo -u django git pull origin main
            
            # Ativar ambiente virtual e atualizar depend√™ncias
            sudo -u django bash -c '
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt
            '
            
            # Aplicar migra√ß√µes
            sudo -u django bash -c '
              source venv/bin/activate
              export DJANGO_SETTINGS_MODULE=core.settings_production
              export DB_NAME=${{ secrets.DB_NAME }}
              export DB_USER=${{ secrets.DB_USER }}
              export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              export DB_HOST=${{ secrets.DB_HOST }}
              export DB_PORT=${{ secrets.DB_PORT }}
              export SECRET_KEY=${{ secrets.SECRET_KEY }}
              export ALLOWED_HOSTS="*"
              python manage.py migrate --noinput
            '
            
            # Coletar arquivos est√°ticos
            sudo -u django bash -c '
              source venv/bin/activate
              export DJANGO_SETTINGS_MODULE=core.settings_production
              python manage.py collectstatic --noinput
            '
            
            # Corrigir permiss√µes
            sudo chown -R www-data:www-data staticfiles/
            sudo chmod -R 755 staticfiles/
            
            # Reiniciar servi√ßos
            sudo systemctl restart django
            sudo systemctl restart nginx
            
            echo "Deploy conclu√≠do com sucesso!"
          EOF

      - name: Verificar status dos servi√ßos
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ needs.terraform-deploy.outputs.ec2_ip }} << 'EOF'
            echo "=== Status Django ==="
            sudo systemctl status django --no-pager
            
            echo ""
            echo "=== Status Nginx ==="
            sudo systemctl status nginx --no-pager
            
            echo ""
            echo "=== √öltimos logs Django ==="
            sudo journalctl -u django -n 20 --no-pager
          EOF

  # Job 4: Testes de Produ√ß√£o
  production-tests:
    name: Production Tests
    runs-on: ubuntu-latest
    needs: [terraform-deploy, app-deploy]

    steps:
      - name: Aguardar aplica√ß√£o estabilizar
        run: sleep 30

      - name: Teste de Health Check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ needs.terraform-deploy.outputs.ec2_ip }}${{ env.APP_PATH }}/health/ || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check OK"
          else
            echo "‚ùå Health check falhou (HTTP $response)"
            exit 1
          fi

      - name: Teste de P√°gina Principal
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ needs.terraform-deploy.outputs.ec2_ip }}${{ env.APP_PATH }}/ || echo "000")
          if [ "$response" = "200" ] || [ "$response" = "302" ]; then
            echo "‚úÖ P√°gina principal OK (HTTP $response)"
          else
            echo "‚ùå P√°gina principal falhou (HTTP $response)"
            exit 1
          fi

      - name: Teste de Admin
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ needs.terraform-deploy.outputs.ec2_ip }}${{ env.APP_PATH }}/admin/ || echo "000")
          if [ "$response" = "200" ] || [ "$response" = "302" ]; then
            echo "‚úÖ Admin OK (HTTP $response)"
          else
            echo "‚ùå Admin falhou (HTTP $response)"
            exit 1
          fi

      - name: Teste de Arquivos Est√°ticos
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ needs.terraform-deploy.outputs.ec2_ip }}${{ env.APP_PATH }}/static/admin/css/base.css || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Arquivos est√°ticos OK"
          else
            echo "‚ö†Ô∏è Arquivos est√°ticos retornou HTTP $response (pode estar OK se usar CDN)"
          fi

      - name: Resumo do Deploy
        run: |
          echo "================================"
          echo "‚úÖ DEPLOY CONCLU√çDO COM SUCESSO"
          echo "================================"
          echo ""
          echo "üåê URL da Aplica√ß√£o:"
          echo "   http://${{ needs.terraform-deploy.outputs.ec2_ip }}${{ env.APP_PATH }}/"
          echo ""
          echo "üë§ Admin:"
          echo "   http://${{ needs.terraform-deploy.outputs.ec2_ip }}${{ env.APP_PATH }}/admin/"
          echo ""
          echo "üîó Com Dom√≠nio (ap√≥s DNS):"
          echo "   http://${{ env.DOMAIN }}${{ env.APP_PATH }}/"
          echo ""
          echo "üìä IP do Servidor:"
          echo "   ${{ needs.terraform-deploy.outputs.ec2_ip }}"
          echo ""
          echo "================================"

  # Job 5: Notifica√ß√£o
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [terraform-deploy, app-deploy, production-tests]
    if: always()

    steps:
      - name: Notificar sucesso
        if: ${{ needs.production-tests.result == 'success' }}
        run: |
          echo "‚úÖ Deploy realizado com sucesso!"
          echo "üåê URL: http://${{ needs.terraform-deploy.outputs.ec2_ip }}${{ env.APP_PATH }}/"

      - name: Notificar falha
        if: ${{ needs.production-tests.result == 'failure' }}
        run: |
          echo "‚ùå Deploy falhou!"
          echo "Verifique os logs acima para mais detalhes."
          exit 1

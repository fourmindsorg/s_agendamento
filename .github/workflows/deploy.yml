# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup environment variables
        run: |
          cp .env.example .env
          echo "SECRET_KEY=test-secret-key-for-deploy" >> .env
          echo "DEBUG=False" >> .env
          echo "ENVIRONMENT=production" >> .env

      - name: Run Django checks
        run: |
          python manage.py check
          python manage.py check --deploy

      - name: Run tests
        run: |
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code from GitHub main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup environment variables
        run: |
          cp .env.example .env
          echo "SECRET_KEY=test-secret-key-for-deploy" >> .env
          echo "DEBUG=False" >> .env
          echo "ENVIRONMENT=production" >> .env

      - name: Run tests
        run: |
          python manage.py check
          python manage.py test

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST || '34.228.191.215' }}
          username: ${{ secrets.EC2_USERNAME || 'ubuntu' }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üöÄ Iniciando deploy..."
            cd /home/ubuntu/s_agendamento

            echo "üìç Branch atual: $(git branch --show-current)"
            echo "üì• Fazendo pull da branch main..."
            git fetch origin
            git reset --hard origin/main

            echo "üìù Commit atual: $(git log --oneline -1)"
            source .venv/bin/activate

            echo "üì¶ Instalando depend√™ncias..."
            pip install -r requirements.txt

            echo "üîß Configurando vari√°veis de ambiente..."
            cp .env.example .env
            echo "SECRET_KEY=$(python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())')" >> .env
            echo "DEBUG=False" >> .env
            echo "ENVIRONMENT=production" >> .env
            echo "ALLOWED_HOSTS=fourmindstech.com.br,www.fourmindstech.com.br,${{ secrets.EC2_HOST || '34.228.191.215' }}" >> .env

            echo "üóÑÔ∏è Executando migra√ß√µes..."
            python manage.py migrate

            echo "üîß Verificando configura√ß√£o do Django..."
            python manage.py check --deploy

            echo "üìÅ Coletando arquivos est√°ticos..."
            python manage.py collectstatic --noinput

            echo "üõë Parando servi√ßos..."
            sudo systemctl stop gunicorn || true
            sudo systemctl stop nginx || true
            sleep 10

            echo "üîÑ Reiniciando servi√ßos..."
            sudo systemctl daemon-reload
            sudo systemctl start gunicorn
            sudo systemctl start nginx

            echo "‚è≥ Aguardando servi√ßos iniciarem..."
            sleep 20

            echo "‚úÖ Verificando status dos servi√ßos..."
            sudo systemctl status gunicorn --no-pager -l
            sudo systemctl status nginx --no-pager -l

            echo "üîç Verificando processos..."
            ps aux | grep gunicorn | grep -v grep || echo "‚ùå Gunicorn n√£o est√° rodando"
            ps aux | grep nginx | grep -v grep || echo "‚ùå Nginx n√£o est√° rodando"

            echo "üß™ Testando conectividade local..."
            curl -f http://localhost:8000/ || echo "‚ùå Gunicorn n√£o responde localmente"
            curl -f http://localhost/ || echo "‚ùå Nginx n√£o responde localmente"

            echo "üåê Testando conectividade externa..."
            curl -f http://fourmindstech.com.br/ || echo "‚ùå Site n√£o responde via HTTP"
            curl -f https://fourmindstech.com.br/ || echo "‚ùå Site n√£o responde via HTTPS"

            echo "üéâ Deploy conclu√≠do!"

      - name: Health Check
        run: |
          echo "üè• Verificando sa√∫de do servidor..."
          sleep 30

          # Testar HTTP primeiro
          echo "üîç Testando HTTP..."
          if curl -f -s http://fourmindstech.com.br/ > /dev/null; then
            echo "‚úÖ HTTP funcionando!"
          else
            echo "‚ùå HTTP n√£o funciona"
          fi

          # Testar HTTPS
          echo "üîç Testando HTTPS..."
          if curl -f -s https://fourmindstech.com.br/ > /dev/null; then
            echo "‚úÖ HTTPS funcionando!"
          else
            echo "‚ùå HTTPS n√£o funciona"
          fi

          # Testar endpoint espec√≠fico
          echo "üîç Testando endpoint de planos..."
          if curl -f -s https://fourmindstech.com.br/authentication/planos/ > /dev/null; then
            echo "‚úÖ Endpoint de planos funcionando!"
          else
            echo "‚ùå Endpoint de planos n√£o funciona"
          fi

          echo "‚úÖ Health check conclu√≠do!"

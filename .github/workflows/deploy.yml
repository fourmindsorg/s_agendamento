# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup environment variables
        run: |
          cp .env.example .env
          echo "SECRET_KEY=test-secret-key-for-deploy" >> .env
          echo "DEBUG=False" >> .env
          echo "ENVIRONMENT=production" >> .env

      - name: Run Django checks
        run: |
          python manage.py check
          python manage.py check --deploy

      - name: Run tests
        run: |
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code from GitHub main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup environment variables
        run: |
          cp .env.example .env
          echo "SECRET_KEY=test-secret-key-for-deploy" >> .env
          echo "DEBUG=False" >> .env
          echo "ENVIRONMENT=production" >> .env

      - name: Run tests
        run: |
          python manage.py check
          python manage.py test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to EC2 via SSM
        run: |
          echo "üöÄ Iniciando deploy para produ√ß√£o..."
          INSTANCE_ID="i-0077873407e4114b1"

          # Enviar comandos de deploy via SSM
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /opt/s-agendamento",
              "git fetch origin",
              "git reset --hard origin/main",
              "source venv/bin/activate",
              "pip install -r requirements.txt --upgrade --quiet",
              "python manage.py migrate",
              "python manage.py collectstatic --noinput",
              "sudo supervisorctl restart s-agendamento",
              "sudo systemctl reload nginx",
              "echo Deploy completo conclu√≠do"
            ]' \
            --timeout-seconds 600 \
            --query "Command.CommandId" \
            --output text > /tmp/command-id.txt

          COMMAND_ID=$(cat /tmp/command-id.txt)
          echo "üìã Command ID: $COMMAND_ID"
          echo "‚è≥ Aguardando execu√ß√£o (pode levar at√© 2 minutos)..."

          # Aguardar at√© 2 minutos
          for i in {1..24}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "Status" \
              --output text 2>/dev/null || echo "InProgress")
            
            if [ "$STATUS" = "Success" ]; then
              echo "‚úÖ Deploy conclu√≠do com sucesso!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "‚ùå Deploy falhou com status: $STATUS"
              echo "üìã Erros:"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$INSTANCE_ID" \
                --query "StandardErrorContent" \
                --output text
              exit 1
            fi
            
            if [ $((i % 4)) -eq 0 ]; then
              echo "‚è≥ Status: $STATUS ($((i * 5))s)"
            fi
            sleep 5
          done

          # Mostrar output do comando
          echo ""
          echo "üìä Output do deploy:"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query "StandardOutputContent" \
            --output text

      - name: Health Check
        run: |
          echo "üè• Verificando sa√∫de do servidor ap√≥s deploy..."
          sleep 10

          # Testar HTTP primeiro
          echo "üîç Testando HTTP..."
          if curl -f -s http://fourmindstech.com.br/ > /dev/null; then
            echo "‚úÖ HTTP funcionando!"
          else
            echo "‚ö†Ô∏è HTTP n√£o respondeu - servidor pode estar reiniciando"
          fi

          # Testar HTTPS
          echo "üîç Testando HTTPS..."
          if curl -f -s https://fourmindstech.com.br/ > /dev/null; then
            echo "‚úÖ HTTPS funcionando!"
          else
            echo "‚ö†Ô∏è HTTPS n√£o respondeu - pode levar alguns minutos"
          fi

          # Testar endpoint espec√≠fico
          echo "üîç Testando endpoint de planos..."
          sleep 5
          if curl -f -s https://fourmindstech.com.br/authentication/planos/ > /dev/null; then
            echo "‚úÖ Endpoint de planos funcionando!"
          else
            echo "‚ö†Ô∏è Endpoint de planos n√£o respondeu ainda"
          fi

          echo "‚úÖ Health check conclu√≠do!"

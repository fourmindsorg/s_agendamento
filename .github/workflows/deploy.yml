name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI - Tests and Linting"]
    types:
      - completed
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'pull_request' && 
      (github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success')

    steps:
      - name: Checkout code from GitHub main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check and Start EC2 instance
        id: instance-check
        run: |
          set +e  # Não falhar se houver erros
          echo "🔍 Verificando estado da instância EC2..."
          INSTANCE_ID="i-0077873407e4114b1"

          STATE=$(aws ec2 describe-instances \
            --instance-ids "$INSTANCE_ID" \
            --query "Reservations[0].Instances[0].State.Name" \
            --output text)

          echo "📍 Estado atual da instância: $STATE"

          if [ "$STATE" == "stopped" ]; then
            echo "🔧 Instância parada. Tentando iniciar..."
            aws ec2 start-instances --instance-ids "$INSTANCE_ID"
            
            echo "⏳ Aguardando instância iniciar (isso pode levar até 2 minutos)..."
            aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
            echo "✅ Instância iniciada com sucesso!"
          elif [ "$STATE" != "running" ]; then
            echo "❌ Instância está no estado: $STATE"
            echo "⚠️ Estados suportados: running, stopped"
            echo ""
            echo "💡 Execute manualmente para fazer deploy:"
            echo "   1. aws ec2 start-instances --instance-ids $INSTANCE_ID"
            echo "   2. aws ssm start-session --target $INSTANCE_ID"
            echo "   3. cd /opt/s-agendamento && sudo bash infrastructure/deploy_completo.sh"
            echo ""
            echo "❌ Pulando deploy automático..."
            exit 1
          else
            echo "✅ Instância já está rodando"
          fi

          echo "🔍 Verificando SSM disponibilidade..."
          # Aguardar SSM Agent ficar online (pode levar 30-60s após start)
          MAX_WAIT=180
          WAITED=0
          SSM_STATUS="Unknown"
          SSM_ONLINE_FINAL="false"

          while [ $WAITED -lt $MAX_WAIT ]; do
            SSM_STATUS=$(aws ssm describe-instance-information \
              --filters "Key=InstanceIds,Values=$INSTANCE_ID" \
              --query "InstanceInformationList[0].PingStatus" \
              --output text 2>/dev/null || echo "Unknown")
            
            if [ "$SSM_STATUS" = "Online" ]; then
              echo "✅ SSM está online!"
              SSM_ONLINE_FINAL="true"
              break
            fi
            
            if [ $((WAITED % 20)) -eq 0 ]; then
              echo "⏳ Aguardando SSM... ($WAITED/$MAX_WAIT)s (status: $SSM_STATUS)"
            fi
            
            sleep 5
            WAITED=$((WAITED + 5))
          done

          # Marcar SSM como disponível ou não
          if [ "$SSM_ONLINE_FINAL" == "true" ]; then
            echo "SSM_ONLINE=true" >> $GITHUB_ENV
            echo "✅ SSM está online - deploy automático possível"
          else
            echo "SSM_ONLINE=false" >> $GITHUB_ENV
            echo ""
            echo "⚠️ SSM não está disponível"
            echo "📋 Deploy automático via SSM não é possível"
            echo ""
            echo "💡 Execute o deploy MANUAL no servidor:"
            echo "   1. Acesse: https://console.aws.amazon.com/ec2/"
            echo "   2. Selecione a instância: i-0077873407e4114b1"
            echo "   3. Clique em 'Connect' → 'EC2 Instance Connect'"
            echo "   4. Execute:"
            echo "      cd /opt/s-agendamento"
            echo "      sudo supervisorctl restart s-agendamento"
            echo "      sudo systemctl reload nginx"
            echo ""
            echo "✅ Workflow concluído - sistema já está em produção"
          fi

          set -e  # Reativar fail-fast
          echo "✅ Verificação de instância concluída com sucesso"

      - name: Deploy to EC2 via SSM
        id: deploy-ssm
        if: env.SSM_ONLINE == 'true'
        run: |
          echo "🚀 Iniciando deploy para produção via SSM..."
          INSTANCE_ID="i-0077873407e4114b1"

          # Enviar comandos de deploy via SSM
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "set -e",
              "echo Instalando Python e venv (se necessário)...",
              "sudo apt-get update -y",
              "sudo apt-get install -y python3 python3-venv python3-pip postgresql-client",
              "cd /opt/s-agendamento",
              "sudo chown -R django:django /opt/s-agendamento || true",
              "sudo -u django git config --global --add safe.directory /opt/s-agendamento || true",
              "sudo -u django git fetch origin",
              "sudo -u django git reset --hard origin/main",
              "sudo -u django bash -c 'rm -rf venv && python3 -m venv venv'",
              "sudo -u django bash -c 'venv/bin/pip install --upgrade pip'",
              "sudo -u django bash -c 'venv/bin/pip install -r requirements.txt --upgrade --quiet'",
              "echo Exportando variáveis de ambiente do banco...",
              "export DJANGO_SETTINGS_MODULE=core.settings_production",
              "export DB_NAME=\"${{ secrets.DB_NAME }}\"",
              "export DB_USER=\"${{ secrets.DB_USER }}\"",
              "export DB_PASSWORD=\"${{ secrets.DB_PASSWORD }}\"",
              "export DB_HOST=\"${{ secrets.DB_HOST }}\"",
              "export DB_PORT=\"${{ secrets.DB_PORT }}\"",
              "echo Gravando .env persistente para runtime...",
              "sudo -u django bash -c 'cat > .env <<EOF\nDJANGO_SETTINGS_MODULE=core.settings_production\nDEBUG=False\nDB_NAME=${{ secrets.DB_NAME }}\nDB_USER=${{ secrets.DB_USER }}\nDB_PASSWORD=${{ secrets.DB_PASSWORD }}\nDB_HOST=${{ secrets.DB_HOST }}\nDB_PORT=${{ secrets.DB_PORT }}\nEOF'",
              "echo Aguardando banco de dados ficar disponível...",
              "if command -v pg_isready >/dev/null 2>&1 && [ -n \"$DB_HOST\" ]; then for i in $(seq 1 24); do pg_isready -h \"$DB_HOST\" -p \"${DB_PORT:-5432}\" -U \"$DB_USER\" && break || (echo Esperando DB... && sleep 5); done; fi",
              "sudo -u django bash -c 'export DJANGO_SETTINGS_MODULE=core.settings_production DB_NAME=\"${DB_NAME}\" DB_USER=\"${DB_USER}\" DB_PASSWORD=\"${DB_PASSWORD}\" DB_HOST=\"${DB_HOST}\" DB_PORT=\"${DB_PORT}\" && venv/bin/python manage.py migrate --noinput'",
              "sudo -u django bash -c 'export DJANGO_SETTINGS_MODULE=core.settings_production DB_NAME=\"${DB_NAME}\" DB_USER=\"${DB_USER}\" DB_PASSWORD=\"${DB_PASSWORD}\" DB_HOST=\"${DB_HOST}\" DB_PORT=\"${DB_PORT}\" && venv/bin/python manage.py collectstatic --noinput --clear'",
              "sudo supervisorctl restart s-agendamento",
              "sudo systemctl reload nginx",
              "echo Deploy completo concluído"
            ]' \
            --timeout-seconds 600 \
            --query "Command.CommandId" \
            --output text > /tmp/command-id.txt

          COMMAND_ID=$(cat /tmp/command-id.txt)
          echo "📋 Command ID: $COMMAND_ID"
          echo "⏳ Aguardando execução (pode levar até 2 minutos)..."

          # Aguardar até 2 minutos
          for i in {1..24}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "Status" \
              --output text 2>/dev/null || echo "InProgress")
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deploy concluído com sucesso!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "❌ Deploy falhou com status: $STATUS"
              echo "📋 Erros:"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$INSTANCE_ID" \
                --query "StandardErrorContent" \
                --output text
              exit 1
            fi
            
            if [ $((i % 4)) -eq 0 ]; then
              echo "⏳ Status: $STATUS ($((i * 5))s)"
            fi
            sleep 5
          done

          # Mostrar output do comando
          echo ""
          echo "📊 Output do deploy:"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query "StandardOutputContent" \
            --output text

      - name: Get EC2 IP
        if: env.SSM_ONLINE != 'true'
        run: |
          echo "🔍 Obtendo IP público da instância..."
          INSTANCE_ID="i-0077873407e4114b1"

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids "$INSTANCE_ID" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)

          echo "Public IP: $PUBLIC_IP"
          echo "EC2_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Setup SSH
        if: env.SSM_ONLINE != 'true'
        run: |
          echo "🔐 Configurando SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Adicionar host key para evitar interatividade
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true

          # Testar conexão
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} echo "✅ SSH conectado com sucesso"

      - name: Deploy to EC2 via SSH
        if: env.SSM_ONLINE != 'true'
        run: |
          echo "🚀 Iniciando deploy via SSH..."

          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_IP }} << 'EOF'
            set -e
            echo "📂 Entrando no diretório da aplicação..."
            echo "🐍 Instalando Python e venv (se necessário)..."
            sudo apt-get update -y
            sudo apt-get install -y python3 python3-venv python3-pip postgresql-client
            cd /opt/s-agendamento
            echo "🔧 Ajustando permissões e git safe.directory..."
            sudo chown -R django:django /opt/s-agendamento || true
            sudo -u django git config --global --add safe.directory /opt/s-agendamento || true
            
            echo "📥 Atualizando código do repositório..."
            sudo -u django git fetch origin
            sudo -u django git reset --hard origin/main
            sudo -u django git --no-pager log --oneline -1 || true
            
            echo "📦 Instalando dependências..."
            sudo -u django bash -c 'rm -rf venv && python3 -m venv venv'
            sudo -u django bash -c 'venv/bin/pip install --upgrade pip'
            sudo -u django bash -c 'venv/bin/pip install -r requirements.txt --upgrade --quiet'
            echo "✓ Dependências instaladas"
            
            echo "⚙️ Exportando variáveis de banco e aguardando disponibilidade..."
            export DB_NAME="${{ secrets.DB_NAME }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            echo "📝 Gravando .env persistente para runtime..."
            sudo -u django bash -c 'cat > .env <<EOF
DJANGO_SETTINGS_MODULE=core.settings_production
DEBUG=False
DB_NAME=${{ secrets.DB_NAME }}
DB_USER=${{ secrets.DB_USER }}
DB_PASSWORD=${{ secrets.DB_PASSWORD }}
DB_HOST=${{ secrets.DB_HOST }}
DB_PORT=${{ secrets.DB_PORT }}
EOF'
            if command -v pg_isready >/dev/null 2>&1 && [ -n "$DB_HOST" ]; then for i in $(seq 1 24); do pg_isready -h "$DB_HOST" -p "${DB_PORT:-5432}" -U "$DB_USER" && break || (echo Esperando DB... && sleep 5); done; fi
            echo "🔄 Aplicando migrações..."
            sudo -u django bash -c 'export DJANGO_SETTINGS_MODULE=core.settings_production DB_NAME="'"$DB_NAME"'" DB_USER="'"$DB_USER"'" DB_PASSWORD="'"$DB_PASSWORD"'" DB_HOST="'"$DB_HOST"'" DB_PORT="'"$DB_PORT"'" && venv/bin/python manage.py migrate --noinput'
            echo "✓ Migrações aplicadas"
            
            echo "📁 Coletando arquivos estáticos..."
            sudo -u django bash -c 'export DJANGO_SETTINGS_MODULE=core.settings_production DB_NAME="'"$DB_NAME"'" DB_USER="'"$DB_USER"'" DB_PASSWORD="'"$DB_PASSWORD"'" DB_HOST="'"$DB_HOST"'" DB_PORT="'"$DB_PORT"'" && venv/bin/python manage.py collectstatic --noinput --clear'
            echo "✓ Arquivos estáticos coletados"
            
            echo "🔄 Reiniciando serviços..."
            sudo supervisorctl restart s-agendamento
            sudo systemctl reload nginx
            echo "✓ Serviços reiniciados"
            
            echo ""
            echo "=============================================="
            echo "🎉 DEPLOY CONCLUÍDO COM SUCESSO!"
            echo "=============================================="
          EOF

          echo "✅ Deploy via SSH concluído!"

      - name: Deployment Summary
        run: |
          echo ""
          echo "=========================================="
          echo "✅ DEPLOYMENT SUMMARY"
          echo "=========================================="
          echo ""
          if [ "$SSM_ONLINE" = "true" ]; then
            echo "✓ Deploy realizado via AWS SSM"
          else
            echo "✓ Deploy realizado via SSH"
          fi
          echo ""
          echo "🌐 URLs para testar:"
          echo "  - https://fourmindstech.com.br/s_agendamentos/"
          echo "  - https://fourmindstech.com.br/admin/"
          echo ""
          echo "=========================================="

      - name: Health Check
        run: |
          echo "🏥 Verificando saúde do servidor após deploy..."
          sleep 10

          # Testar HTTP primeiro
          echo "🔍 Testando HTTP..."
          if curl -f -s --max-time 10 http://fourmindstech.com.br/ > /dev/null 2>&1; then
            echo "✅ HTTP funcionando!"
          else
            echo "⚠️ HTTP não respondeu - servidor pode estar reiniciando"
          fi

          # Testar HTTPS
          echo "🔍 Testando HTTPS..."
          if curl -f -s --max-time 10 https://fourmindstech.com.br/ > /dev/null 2>&1; then
            echo "✅ HTTPS funcionando!"
          else
            echo "⚠️ HTTPS não respondeu - pode levar alguns minutos"
          fi

          # Testar endpoint específico
          echo "🔍 Testando endpoint de planos..."
          sleep 5
          if curl -f -s --max-time 10 https://fourmindstech.com.br/authentication/planos/ > /dev/null 2>&1; then
            echo "✅ Endpoint de planos funcionando!"
          else
            echo "⚠️ Endpoint de planos não respondeu ainda"
          fi

          echo ""
          echo "✅ Health check concluído!"
          echo "💡 Se alguma verificação falhou, aguarde alguns minutos e teste manualmente."

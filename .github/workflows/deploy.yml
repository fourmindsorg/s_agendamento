name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch: # Execu√ß√£o manual tamb√©m dispon√≠vel

env:
  AWS_REGION: us-east-1
  EC2_HOST: 13.221.138.11
  PROJECT_NAME: sistema-agendamento-4minds
  DOMAIN: fourmindstech.com.br

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh || true
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          echo "=== Testando conex√£o SSH ==="
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ubuntu@${{ env.EC2_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_HOST }} << 'EOF'
            set -e
            
            echo "=== Atualizando c√≥digo do reposit√≥rio ==="
            cd /home/django/app
            
            # Fazer backup do .env (se existir)
            if [ -f .env ]; then
                cp .env .env.backup
            fi
            
            # Atualizar c√≥digo
            sudo -u django git fetch origin
            sudo -u django git reset --hard origin/main
            
            # Restaurar .env (se backup existir)
            if [ -f .env.backup ]; then
                cp .env.backup .env
            fi
            
            # Ativar ambiente virtual
            source venv/bin/activate
            
            # Instalar/atualizar depend√™ncias
            pip install -r requirements.txt
            
            # Executar migra√ß√µes
            export DB_NAME=agendamentos_db
            export DB_USER=postgres
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_PORT=5432
            
            python manage.py migrate --settings=core.settings_production
            
            # Coletar arquivos est√°ticos
            python manage.py collectstatic --noinput --settings=core.settings_production
            
            # Corrigir permiss√µes
            sudo chown -R django:django staticfiles/
            sudo chmod -R 755 staticfiles/
            
            # Reiniciar servi√ßos
            sudo supervisorctl restart gunicorn
            sudo systemctl reload nginx
            
            echo "=== Deploy conclu√≠do com sucesso! ==="
          EOF

      - name: Verificar status dos servi√ßos
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ env.EC2_HOST }} << 'EOF'
            echo "=== Status Gunicorn ==="
            sudo supervisorctl status gunicorn
            
            echo ""
            echo "=== Status Nginx ==="
            sudo systemctl status nginx --no-pager | head -10
            
            echo ""
            echo "=== Teste HTTP ==="
            curl -I http://localhost:8000 | head -5
          EOF

      - name: Notificar sucesso
        if: success()
        run: |
          echo "‚úÖ Deploy realizado com sucesso!"
          echo "üåê Site: https://${{ env.DOMAIN }}"
          echo "üîê Admin: https://${{ env.DOMAIN }}/admin"

      - name: Notificar falha
        if: failure()
        run: |
          echo "‚ùå Deploy falhou! Verifique os logs acima."

name: CI - Tests and Linting

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_agendamentos
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libyaml-dev libffi-dev libssl-dev python3-dev
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          echo "üì¶ Preparando requirements.txt para Linux (removendo depend√™ncias Windows-only)..."
          # Criar requirements filtrado sem depend√™ncias espec√≠ficas do Windows
          grep -v -E "^(pywin32|pywin32-ctypes|winshell|PyAutoGUI|PyGetWindow|PyScreeze|PyRect|PyMsgBox|MouseInfo)==" requirements.txt > requirements-linux.txt || cp requirements.txt requirements-linux.txt
          
          # Verificar se Django est√° no arquivo filtrado
          if ! grep -q "^Django==" requirements-linux.txt; then
            echo "‚ö†Ô∏è Django n√£o encontrado em requirements-linux.txt, verificando requirements.txt original..."
            grep "^Django==" requirements.txt >> requirements-linux.txt || echo "Django==4.2.25" >> requirements-linux.txt
          fi
          
          # Instalar PyYAML separadamente (pode precisar de compila√ß√£o)
          echo "üì¶ Instalando PyYAML..."
          # Tentar vers√£o mais recente que pode ter wheels pr√©-compilados
          pip install --no-cache-dir PyYAML>=6.0 || pip install --no-cache-dir PyYAML==5.4.1 || {
            echo "‚ö†Ô∏è Falha ao instalar PyYAML espec√≠fico, tentando √∫ltima vers√£o..."
            pip install --no-cache-dir PyYAML
          }
          
          echo "üì¶ Instalando depend√™ncias do requirements-linux.txt..."
          echo "   (Este processo pode levar alguns minutos devido ao grande n√∫mero de depend√™ncias...)"
          
          # Instalar Django primeiro para garantir disponibilidade
          echo "üì¶ Instalando Django e depend√™ncias cr√≠ticas primeiro..."
          pip install --no-cache-dir Django==4.2.25 || pip install --no-cache-dir Django
          
          # Verificar se Django foi instalado
          if ! python -c "import django" 2>/dev/null; then
            echo "‚ùå ERRO CR√çTICO: Falha ao instalar Django"
            exit 1
          fi
          echo "‚úÖ Django instalado: $(python -c 'import django; print(django.__version__)')"
          
          # Remover PyYAML do requirements-linux.txt para evitar conflitos (j√° instalado)
          sed -i '/^PyYAML==/d' requirements-linux.txt || sed -i '' '/^PyYAML==/d' requirements-linux.txt
          
          # Instalar outras depend√™ncias com tratamento de erros
          set +e  # N√£o falhar no primeiro erro
          pip install --no-cache-dir --upgrade -r requirements-linux.txt 2>&1 | tee /tmp/pip-install.log
          INSTALL_EXIT=$?
          set -e  # Reativar fail-fast
          
          # Verificar se Django ainda est√° dispon√≠vel ap√≥s instala√ß√£o completa
          echo "üîç Verificando se Django ainda est√° dispon√≠vel..."
          python -c "import django; print(f'‚úÖ Django {django.__version__} dispon√≠vel')" || {
            echo "‚ùå ERRO: Django n√£o est√° mais dispon√≠vel ap√≥s instala√ß√£o!"
            pip install --no-cache-dir Django==4.2.25
            python -c "import django" || exit 1
          }
          
          # Verificar outras depend√™ncias cr√≠ticas
          echo "üìã Verificando outras depend√™ncias cr√≠ticas..."
          python -c "import requests" || echo "‚ö†Ô∏è requests n√£o instalado (opcional)"
          python -c "import qrcode" || echo "‚ö†Ô∏è qrcode n√£o instalado (opcional)"
          python -c "import dotenv" || echo "‚ö†Ô∏è python-dotenv n√£o instalado (opcional)"
          
          if [ $INSTALL_EXIT -ne 0 ]; then
            echo "‚ö†Ô∏è Algumas depend√™ncias opcionais falharam na instala√ß√£o"
          fi
          
          echo "üì¶ Instalando depend√™ncias de teste..."
          pip install pytest pytest-django pytest-cov flake8
          echo "‚úÖ Depend√™ncias cr√≠ticas verificadas e instaladas com sucesso"

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run migrations
        env:
          DB_NAME: test_agendamentos
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
        run: |
          # Verificar se Django est√° dispon√≠vel antes de rodar migra√ß√µes
          echo "üîç Verificando Django antes de rodar migra√ß√µes..."
          python -c "import django; print(f'‚úÖ Django {django.__version__} dispon√≠vel')" || {
            echo "‚ùå Django n√£o dispon√≠vel! Tentando reinstalar..."
            pip install --no-cache-dir Django==4.2.25
            python -c "import django" || {
              echo "‚ùå Falha cr√≠tica: Django n√£o pode ser importado"
              exit 1
            }
          }
          echo "üîÑ Executando migra√ß√µes..."
          python manage.py migrate --settings=core.settings

      - name: Run tests
        env:
          DB_NAME: test_agendamentos
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
        run: |
          python manage.py test --settings=core.settings

      - name: Generate coverage report
        if: matrix.python-version == '3.10'
        env:
          DB_NAME: test_agendamentos
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html || echo "No tests to run"

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

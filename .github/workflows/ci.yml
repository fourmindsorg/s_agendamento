name: CI - Tests and Linting

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_agendamentos
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libyaml-dev libffi-dev libssl-dev python3-dev
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          echo "📦 Preparando requirements.txt para Linux (removendo dependências Windows-only)..."
          # Criar requirements filtrado sem dependências específicas do Windows
          grep -v -E "^(pywin32|pywin32-ctypes|winshell|PyAutoGUI|PyGetWindow|PyScreeze|PyRect|PyMsgBox|MouseInfo)==" requirements.txt > requirements-linux.txt || cp requirements.txt requirements-linux.txt
          
          # Instalar dependências críticas PRIMEIRO, antes de qualquer outra coisa
          echo "📦 Instalando dependências críticas primeiro (antes do requirements.txt)..."
          critical_packages=("Django==4.2.25" "requests" "python-dotenv" "qrcode[pil]")
          echo "   Instalando: ${critical_packages[*]}"
          pip install --no-cache-dir "${critical_packages[@]}" || {
            echo "⚠️ Algumas dependências críticas falharam, tentando instalar individualmente..."
            pip install --no-cache-dir Django==4.2.25 || pip install --no-cache-dir Django
            pip install --no-cache-dir requests
            pip install --no-cache-dir python-dotenv
            pip install --no-cache-dir "qrcode[pil]" || pip install --no-cache-dir qrcode
          }
          
          # Verificar se todas as dependências críticas foram instaladas
          echo "🔍 Verificando instalação das dependências críticas..."
          python -c "import django; print(f'✅ Django {django.__version__} instalado')" || {
            echo "❌ ERRO CRÍTICO: Django não instalado"
            exit 1
          }
          python -c "import requests; print('✅ requests instalado')" || {
            echo "❌ ERRO CRÍTICO: requests não instalado"
            pip install --no-cache-dir requests
            python -c "import requests" || exit 1
          }
          python -c "import dotenv; print('✅ python-dotenv instalado')" || {
            echo "❌ ERRO CRÍTICO: python-dotenv não instalado"
            pip install --no-cache-dir python-dotenv
            python -c "import dotenv" || exit 1
          }
          python -c "import qrcode; print('✅ qrcode instalado')" || {
            echo "⚠️ qrcode não instalado, tentando instalar..."
            pip install --no-cache-dir "qrcode[pil]" || pip install --no-cache-dir qrcode
            python -c "import qrcode" || echo "⚠️ qrcode não disponível (pode ser opcional)"
          }
          
          # Instalar PyYAML separadamente (pode precisar de compilação)
          echo "📦 Instalando PyYAML..."
          pip install --no-cache-dir PyYAML>=6.0 || pip install --no-cache-dir PyYAML==5.4.1 || {
            echo "⚠️ Falha ao instalar PyYAML específico, tentando última versão..."
            pip install --no-cache-dir PyYAML
          }
          
          echo "📦 Instalando outras dependências do requirements-linux.txt..."
          echo "   (Este processo pode levar alguns minutos e pode ter conflitos de versão...)"
          
          # Remover dependências críticas já instaladas do requirements-linux.txt para evitar conflitos
          sed -i '/^Django==/d' requirements-linux.txt || sed -i '' '/^Django==/d' requirements-linux.txt
          sed -i '/^requests==/d' requirements-linux.txt || sed -i '' '/^requests==/d' requirements-linux.txt
          sed -i '/^python-dotenv==/d' requirements-linux.txt || sed -i '' '/^python-dotenv==/d' requirements-linux.txt
          sed -i '/^qrcode==/d' requirements-linux.txt || sed -i '' '/^qrcode==/d' requirements-linux.txt
          sed -i '/^PyYAML==/d' requirements-linux.txt || sed -i '' '/^PyYAML==/d' requirements-linux.txt
          
          # Atualizar tzdata para versão compatível (kombu requer >=2025.2)
          echo "📦 Atualizando tzdata para versão compatível..."
          sed -i 's/^tzdata==.*/tzdata>=2025.2/' requirements-linux.txt || sed -i '' 's/^tzdata==.*/tzdata>=2025.2/' requirements-linux.txt
          pip install --no-cache-dir --upgrade 'tzdata>=2025.2' || pip install --no-cache-dir tzdata
          
          # Instalar outras dependências com tratamento de erros
          # Tentar instalação normal - pode ter conflitos de versão, mas instalará o que conseguir
          set +e  # Não falhar no primeiro erro
          pip install --no-cache-dir --upgrade -r requirements-linux.txt 2>&1 | tee /tmp/pip-install.log || {
            INSTALL_EXIT=$?
            # Se falhar com erro de resolução, tentar instalar linha por linha
            if grep -q "ResolutionImpossible" /tmp/pip-install.log; then
              echo "⚠️ Detectado conflito de resolução de dependências"
              echo "📦 Tentando instalar dependências individualmente (ignorando conflitos)..."
              while IFS= read -r line; do
                # Pular linhas vazias, comentários e dependências já instaladas
                [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
                [[ "$line" =~ ^(Django|requests|python-dotenv|qrcode|PyYAML)== ]] && continue
                echo "   Tentando instalar: $line"
                pip install --no-cache-dir "$line" 2>&1 | grep -v "ResolutionImpossible" || true
              done < requirements-linux.txt
            fi
          }
          INSTALL_EXIT=${INSTALL_EXIT:-0}
          set -e  # Reativar fail-fast
          
          # Verificar novamente se dependências críticas ainda estão disponíveis
          echo "🔍 Verificando se dependências críticas ainda estão disponíveis após instalação completa..."
          python -c "import django; print(f'✅ Django {django.__version__} disponível')" || {
            echo "❌ ERRO: Django não está mais disponível após instalação!"
            pip install --no-cache-dir Django==4.2.25
            python -c "import django" || exit 1
          }
          python -c "import requests; print('✅ requests ainda disponível')" || {
            echo "⚠️ requests não está mais disponível, reinstalando..."
            pip install --no-cache-dir requests
          }
          python -c "import dotenv; print('✅ python-dotenv ainda disponível')" || {
            echo "⚠️ python-dotenv não está mais disponível, reinstalando..."
            pip install --no-cache-dir python-dotenv
          }
          
          if [ $INSTALL_EXIT -ne 0 ]; then
            echo "⚠️ Algumas dependências opcionais falharam na instalação (conflitos de versão)"
            echo "   Isso é esperado com requirements.txt grandes - dependências críticas estão instaladas"
          fi
          
          echo "📦 Instalando dependências de teste..."
          pip install pytest pytest-django pytest-cov flake8
          echo "✅ Dependências críticas verificadas e instaladas com sucesso"

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run migrations
        env:
          DB_NAME: test_agendamentos
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
        run: |
          # Verificar e instalar dependências críticas antes de rodar migrações
          echo "🔍 Verificando dependências críticas antes de rodar migrações..."
          
          # Lista de módulos críticos e seus pacotes pip
          declare -A critical_modules=(
            ["django"]="Django==4.2.25"
            ["requests"]="requests"
            ["qrcode"]="qrcode[pil]"
            ["dotenv"]="python-dotenv"
          )
          
          missing_modules=()
          for module in "${!critical_modules[@]}"; do
            if ! python -c "import $module" 2>/dev/null; then
              echo "⚠️ Módulo '$module' não encontrado"
              missing_modules+=("${critical_modules[$module]}")
            else
              echo "✅ Módulo '$module' disponível"
            fi
          done
          
          # Instalar módulos faltantes
          if [ ${#missing_modules[@]} -gt 0 ]; then
            echo "📦 Instalando módulos faltantes: ${missing_modules[*]}"
            pip install --no-cache-dir "${missing_modules[@]}" || {
              echo "❌ Falha ao instalar módulos críticos"
              exit 1
            }
            
            # Verificar novamente após instalação
            for module in "${!critical_modules[@]}"; do
              if ! python -c "import $module" 2>/dev/null; then
                echo "❌ ERRO CRÍTICO: Módulo '$module' ainda não disponível após instalação"
                exit 1
              fi
            done
          fi
          
          echo "✅ Todas as dependências críticas verificadas"
          echo "🔄 Executando migrações..."
          python manage.py migrate --settings=core.settings

      - name: Run tests
        env:
          DB_NAME: test_agendamentos
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
        run: |
          python manage.py test --settings=core.settings

      - name: Generate coverage report
        if: matrix.python-version == '3.10'
        env:
          DB_NAME: test_agendamentos
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: True
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html || echo "No tests to run"

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
